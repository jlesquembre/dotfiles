;; The deps.edn file describes the information needed to build a classpath.
;;
;; When using the `clojure` or `clj` script, there are several deps.edn files
;; that are combined:
;; - install-level
;; - user level (this file)
;; - project level (current directory when invoked)
;;
;; For all attributes other than :paths, these config files are merged left to right.
;; Only the last :paths is kept and others are dropped.

{
 #_:mvn/repos #_$CUSTOM_MVN_REPOS

 :aliases {:outdated {:extra-deps {com.github.liquidz/antq {:mvn/version "2.7.1133"}}
                      :main-opts  ["-m" "antq.core"]}

           :upgrade  {:extra-deps {com.github.liquidz/antq {:mvn/version "2.7.1133"}}
                                 :main-opts  ["-m" "antq.core" "--upgrade" "--force"]}

           ;; project creation from templates:
           ;; - see https://github.com/seancorfield/clj-new
           ;; - create an application project:
           ;;   - clj -A:new app myname/myapp
           ;;   - cd myapp
           ;;   - clj -m myname.myapp # run it!
           ;;   - clj -A:test:runner # run the tests!
           ;; - create a library project:
           ;;   - clj -A:new lib myname/my-cool-lib
           ;;   - cd my-cool-lib
           ;;   - clj -A:test:runner # run the tests!
           :new {:extra-deps {seancorfield/clj-new {:mvn/version "1.1.309"}}
                 :exec-fn clj-new/create
                 :exec-args {:template "app"}}

           :rebel      {:extra-deps {com.bhauman/rebel-readline {:mvn/version "0.1.4"}
                                     com.rpl/specter            {:mvn/version "1.1.4"}}
                        :main-opts  ["-m" "rebel-readline.main"]}

           :rebel-cljs {:extra-deps {com.bhauman/rebel-readline-cljs {:mvn/version "0.1.4"}
                                     com.bhauman/figwheel-main       {:mvn/version "0.2.18"}}
                        :main-opts  ["-m" "figwheel.main"]}

           :server {:extra-deps {nasus/nasus {:mvn/version "0.1.7"}}
                    :main-opts ["-m" "http.server"]}

           ;; see https://github.com/jonase/eastwood#running-eastwood-in-a-repl
           :eastwood {:extra-deps {jonase/eastwood {:mvn/version "1.4.2"}}
                      :main-opts ["-m" "eastwood.lint" "{:source-paths,[\"src\"],:test-paths,[\"test\"]}"]}

           :kibit {:extra-deps   {tvaughan/kibit-runner {:mvn/version "1.0.1"}}
                   :override-deps {jonase/kibit {:git/url "https://github.com/jonase/kibit.git"
                                                 :sha "a5fbc722265ee8456b8a985db8c18093c7d83820"
                                                 :deps/root "kibit"}}
                   :main-opts ["-m" "kibit-runner.cmdline"]}

           :check {:extra-deps {athos/clj-check {:git/url "https://github.com/athos/clj-check.git"
                                                 :sha "518d5a1cbfcd7c952f548e6dbfcb9a4a5faf9062"}}
                   :main-opts ["-m" "clj-check.check"]}

           :pbuilder {:extra-deps {org.rssys/pbuilder {:mvn/version "0.2.2"}}
                      :jvm-opts   []
                      :main-opts  ["--main" "org.rssys.pbuilder.core"]}

           :find-deps  {:extra-deps {find-deps/find-deps {:git/url "https://github.com/hagmonk/find-deps"
                                                          :sha     "9bf23a52cb0a8190c9c2c7ad1d796da802f8ce7a"}}
                        :main-opts  ["-m" "find-deps.core"]}

           ;; start a Socket REPL
           :socket {:jvm-opts ["-Dclojure.server.repl={:port,5555,:accept,clojure.core.server/repl}"]}

           ;; start a Socket pREPL
           :prepl {:jvm-opts ["-Dclojure.server.repl={:port,5555,:accept,clojure.core.server/io-prepl}"
                              "-Dclojure.server.node={:port,5556,:accept,cljs.server.node/prepl}"
                              "-Dclojure.server.browser={:port,5557,:accept,cljs.server.browser/prepl}"]}
           ; :rebl
           ; {:extra-deps {org.clojure/core.async {:mvn/version "1.6.681"}
           ;               ;; deps for file datafication (0.9.149 or later)
           ;               org.clojure/data.csv {:mvn/version "1.0.1"}
           ;               org.clojure/data.json {:mvn/version "2.4.0"}
           ;               org.yaml/snakeyaml {:mvn/version "2.2"}
           ;               com.cognitect/rebl          {:mvn/version "0.9.245"}
           ;               org.openjfx/javafx-fxml     {:mvn/version "21"}
           ;               org.openjfx/javafx-controls {:mvn/version "21"}
           ;               org.openjfx/javafx-graphics {:mvn/version "21"}
           ;               org.openjfx/javafx-media    {:mvn/version "21"}
           ;               org.openjfx/javafx-swing    {:mvn/version "21"}
           ;               org.openjfx/javafx-base     {:mvn/version "21"}
           ;               org.openjfx/javafx-web      {:mvn/version "21"}}}

           :user {:exec-fn local-utils/init
                  :extra-deps {me.lafuente/clj-dev-utils
                               {:local/root "$HOME/projects/clj-dev-utils"}}}
                               ; {:git/url "https://github.com/jlesquembre/clj-dev-utils"
                               ;  :git/sha "5eec7a887bc9e066e2b6d8dc8263f8bfa4ec64d7"}}}

           :nrepl {:extra-deps {nrepl/nrepl  {:mvn/version "1.1.0"}
                                cider/cider-nrepl {:mvn/version "0.44.0"}}
                   :main-opts ["-m" "nrepl.cmdline" "--middleware" "[cider.nrepl/cider-middleware]"]}

           :nrepl-cljs {:extra-deps {nrepl/nrepl  {:mvn/version "1.1.0"}
                                     cider/cider-nrepl {:mvn/version "0.44.0"}
                                     cider/piggieback {:mvn/version "0.5.3"}}
                        :main-opts ["-m" "nrepl.cmdline" "--middleware"
                                    "[cider.nrepl/cider-middleware,cider.piggieback/wrap-cljs-repl]"]}
           :extra {:extra-deps {org.clojure/test.check {:mvn/version "1.1.1"}
                                org.clojure/core.async {:mvn/version "1.6.681"}}}}}


  ;; Aliases
  ;;   resolve-deps aliases (-R) affect dependency resolution, options:
  ;;     :extra-deps - specifies extra deps to add to :deps
  ;;     :override-deps - specifies a coordinate to use instead of that in :deps
  ;;     :default-deps - specifies a coordinate to use for a lib if one isn't found
  ;;   make-classpath aliases (-C) affect the classpath generation, options:
  ;;     :extra-paths - vector of additional paths to add to the classpath
  ;;     :classpath-overrides - map of lib to path that overrides the result of resolving deps

  ;; :aliases {
  ;;   :deps {:extra-deps {org.clojure/tools.deps.alpha {:mvn/version "0.2.196"}}}
  ;;   :test {:extra-paths ["test"]}
  ;; }
