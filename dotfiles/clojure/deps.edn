;; The deps.edn file describes the information needed to build a classpath.
;;
;; When using the `clojure` or `clj` script, there are several deps.edn files
;; that are combined:
;; - install-level
;; - user level (this file)
;; - project level (current directory when invoked)
;;
;; For all attributes other than :paths, these config files are merged left to right.
;; Only the last :paths is kept and others are dropped.

{:aliases {:outdated   {:extra-deps {olical/depot {:mvn/version "2.0.1"}}
                        :main-opts  ["-m" "depot.outdated.main"]}

           ;; project creation from templates:
           ;; - see https://github.com/seancorfield/clj-new
           ;; - create an application project:
           ;;   - clj -A:new app myname/myapp
           ;;   - cd myapp
           ;;   - clj -m myname.myapp # run it!
           ;;   - clj -A:test:runner # run the tests!
           ;; - create a library project:
           ;;   - clj -A:new lib myname/my-cool-lib
           ;;   - cd my-cool-lib
           ;;   - clj -A:test:runner # run the tests!
           :new {:extra-deps {seancorfield/clj-new {:mvn/version "1.0.199"}}
                 :main-opts ["-m" "clj-new.create"]}

           :rebel      {:extra-deps {com.bhauman/rebel-readline {:mvn/version "0.1.4"}
                                     com.rpl/specter            {:mvn/version "1.1.3"}}
                        :main-opts  ["-m" "rebel-readline.main"]}

           :rebel-cljs {:extra-deps {com.bhauman/rebel-readline-cljs {:mvn/version "0.1.4"}
                                     com.bhauman/figwheel-main       {:mvn/version "0.2.9"}}
                        :main-opts  ["-m" "figwheel.main"]}

           :server {:extra-deps {nasus {:mvn/version "0.1.7"}}
                    :main-opts ["-m" "http.server"]}

           ;; see https://github.com/jonase/eastwood#running-eastwood-in-a-repl
           :eastwood {:extra-deps {jonase/eastwood {:mvn/version "0.3.11"}}
                      :main-opts ["-m" "eastwood.lint" "{:source-paths,[\"src\"],:test-paths,[\"test\"]}"]}

           ;; uberjar building:
           ;; - see https://github.com/seancorfield/depstar for a minimalist approach:
           ;;   - clj -A:uberjar result.jar
           ;; - to run it:
           ;;   - java -cp result.jar clojure.main -m mymain.namespace
           ;; - build a library JAR:
           ;;   - clj -A:jar result-lib.jar
           :uberjar {:extra-deps {seancorfield/depstar {:mvn/version "1.0.94"}}
                     :main-opts ["-m" "hf.depstar.uberjar"]}
           :jar {:extra-deps {seancorfield/depstar {:mvn/version "1.0.94"}}
                 :main-opts ["-m" "hf.depstar.jar"]}

           :pbuilder {:extra-deps {org.rssys/pbuilder {:mvn/version "0.1.11"}}
                      :jvm-opts   []
                      :main-opts  ["--main" "org.rssys.pbuilder.core"]}

           :find-deps  {:extra-deps {find-deps {:git/url "https://github.com/hagmonk/find-deps"
                                                :sha     "9bf23a52cb0a8190c9c2c7ad1d796da802f8ce7a"}}
                        :main-opts  ["-m" "find-deps.core"]}

           ;; start a Socket REPL
           :socket {:jvm-opts ["-Dclojure.server.repl={:port,5555,:accept,clojure.core.server/repl}"]}

           ;; start a Socket pREPL
           :prepl {:jvm-opts ["-Dclojure.server.repl={:port,5555,:accept,clojure.core.server/io-prepl}"
                              "-Dclojure.server.node={:port,5556,:accept,cljs.server.node/prepl}"
                              "-Dclojure.server.browser={:port,5557,:accept,cljs.server.browser/prepl}"]}
           :rebl
           {:extra-deps {org.clojure/core.async {:mvn/version "1.2.603"}
                         ;; deps for file datafication (0.9.149 or later)
                         org.clojure/data.csv {:mvn/version "1.0.0"}
                         org.clojure/data.json {:mvn/version "1.0.0"}
                         org.yaml/snakeyaml {:mvn/version "1.26"}
                         com.cognitect/rebl
                         ;; adjust to match your install location
                         {:local/root "$HOME/projects/REBL/REBL-0.9.220.jar"}
                         org.openjfx/javafx-fxml     {:mvn/version "14.0.1"}
                         org.openjfx/javafx-controls {:mvn/version "14.0.1"}
                         org.openjfx/javafx-graphics {:mvn/version "14.0.1"}
                         org.openjfx/javafx-media    {:mvn/version "14.0.1"}
                         org.openjfx/javafx-swing    {:mvn/version "14.0.1"}
                         org.openjfx/javafx-base     {:mvn/version "14.0.1"}
                         org.openjfx/javafx-web      {:mvn/version "14.0.1"}}}
            ; :main-opts ["-m" "cognitect.rebl"]}

           :user {:extra-deps {vvvvalvalval/scope-capture   {:mvn/version "0.3.2"}
                               hashp                        {:mvn/version "0.2.0"}
                               lambdaisland/deep-diff2      {:mvn/version "2.0.0-93"}
                               com.gfredericks/dot-slash-2  {:mvn/version "0.1.5"}
                               com.gfredericks/repl-utils   {:mvn/version "0.2.22"}}
                  :extra-paths ["$CLJ_USER_PATH"]}

           :nrepl {:extra-deps {nrepl/nrepl  {:mvn/version "0.7.0"}
                                cider/cider-nrepl {:mvn/version "0.25.2"}}
                   :main-opts ["-m" "nrepl.cmdline" "--middleware" "[cider.nrepl/cider-middleware]"]}

           :nrepl-cljs {:extra-deps {nrepl/nrepl  {:mvn/version "0.7.0"}
                                     cider/cider-nrepl {:mvn/version "0.25.2"}
                                     cider/piggieback {:mvn/version "0.5.0"}}
                        :main-opts ["-m" "nrepl.cmdline" "--middleware"
                                    "[cider.nrepl/cider-middleware,cider.piggieback/wrap-cljs-repl]"]}}}

  ;; Paths
  ;;   Directories in the current project to include in the classpath

  ;; :paths ["src"]

  ;; External dependencies

  ;; :deps {
  ;;   org.clojure/clojure {:mvn/version "1.9.0"}
  ;; }

  ;; Aliases
  ;;   resolve-deps aliases (-R) affect dependency resolution, options:
  ;;     :extra-deps - specifies extra deps to add to :deps
  ;;     :override-deps - specifies a coordinate to use instead of that in :deps
  ;;     :default-deps - specifies a coordinate to use for a lib if one isn't found
  ;;   make-classpath aliases (-C) affect the classpath generation, options:
  ;;     :extra-paths - vector of additional paths to add to the classpath
  ;;     :classpath-overrides - map of lib to path that overrides the result of resolving deps

  ;; :aliases {
  ;;   :deps {:extra-deps {org.clojure/tools.deps.alpha {:mvn/version "0.2.196"}}}
  ;;   :test {:extra-paths ["test"]}
  ;; }

  ;; Provider attributes

  ;; :mvn/repos {
  ;;   "central" {:url "https://repo1.maven.org/maven2/"}
  ;;   "clojars" {:url "https://clojars.org/repo"}
  ;; }
